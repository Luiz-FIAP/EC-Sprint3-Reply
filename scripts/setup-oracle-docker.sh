#!/bin/bash

# Script para configurar Oracle Database Free no Docker
# Sistema de Monitoramento IoT com ESP32

set -e  # Para o script se houver erro

echo "üöÄ Configurando Oracle Database Free no Docker..."
echo "=================================================="

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado!"
    echo "üì• Baixe em: https://www.docker.com/products/docker-desktop/"
    exit 1
fi

echo "‚úÖ Docker encontrado: $(docker --version)"

# Verificar se container j√° existe
if docker ps -a | grep -q oracle-free; then
    echo "‚ö†Ô∏è  Container 'oracle-free' j√° existe"
    read -p "Deseja remov√™-lo e criar novo? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üóëÔ∏è  Removendo container existente..."
        docker rm -f oracle-free || true
        docker volume rm oracle-data || true
    else
        echo "üîÑ Usando container existente..."
        docker start oracle-free
        
        # Verificar se usu√°rio FIAP j√° existe
        echo "üîç Verificando usu√°rio FIAP..."
        if docker exec oracle-free sqlplus -s fiap/123456@FREEPDB1 <<< "SELECT 'FIAP_USER_EXISTS' FROM DUAL; EXIT;" 2>/dev/null | grep -q "FIAP_USER_EXISTS"; then
            echo "‚úÖ Usu√°rio FIAP j√° configurado!"
            echo "üìä Sistema pronto para uso!"
            exit 0
        else
            echo "üîß Usu√°rio FIAP n√£o encontrado, criando..."
        fi
    fi
fi

# Verificar mem√≥ria dispon√≠vel
echo "üîç Verificando recursos do sistema..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    MEM_GB=$(( $(sysctl -n hw.memsize) / 1024 / 1024 / 1024 ))
else
    # Linux
    MEM_GB=$(free -g | awk '/^Mem:/{print $2}')
fi

echo "üíæ Mem√≥ria dispon√≠vel: ${MEM_GB}GB"
if [ $MEM_GB -lt 8 ]; then
    echo "‚ö†Ô∏è  Recomendado: 8GB+ de RAM para Oracle"
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Criar e executar container Oracle se n√£o existir
if ! docker ps -a | grep -q oracle-free; then
    echo "üì¶ Criando container Oracle Database Free..."
    docker run -d \
      --name oracle-free \
      -p 1521:1521 \
      -p 5500:5500 \
      -e ORACLE_PWD=123456 \
      -e ORACLE_CHARACTERSET=AL32UTF8 \
      -v oracle-data:/opt/oracle/oradata \
      container-registry.oracle.com/database/free:latest
fi

echo "‚è≥ Aguardando inicializa√ß√£o do Oracle..."
echo "   (Isso pode levar 5-10 minutos na primeira vez)"
echo "   Pressione Ctrl+C para parar de acompanhar os logs"

# Acompanhar logs at√© ver a mensagem de pronto
timeout 600 docker logs -f oracle-free &
LOG_PID=$!

# Verificar se ficou pronto
READY=false
for i in {1..60}; do
    if docker logs oracle-free 2>&1 | grep -q "DATABASE IS READY TO USE"; then
        READY=true
        break
    fi
    sleep 10
    echo "‚è≥ Ainda inicializando... (${i}0s)"
done

kill $LOG_PID 2>/dev/null || true

if [ "$READY" = true ]; then
    echo ""
    echo "‚úÖ Oracle Database est√° pronto!"
    echo "üîß Criando usu√°rio FIAP..."
    
    # Aguardar mais um pouco para garantir que o servi√ßo esteja completamente pronto
    sleep 5
    
    # Criar usu√°rio FIAP no Oracle
    USER_CREATION_RESULT=$(docker exec oracle-free sqlplus -s sys/123456@FREEPDB1 as sysdba <<EOF
SET PAGESIZE 0
SET FEEDBACK OFF
SET HEADING OFF
WHENEVER SQLERROR EXIT SQL.SQLCODE

-- Tentar remover usu√°rio se j√° existir (ignora erro se n√£o existir)
BEGIN
    EXECUTE IMMEDIATE 'DROP USER fiap CASCADE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -1918 THEN -- -1918 = usu√°rio n√£o existe
            RAISE;
        END IF;
END;
/

-- Criar usu√°rio FIAP
CREATE USER fiap IDENTIFIED BY 123456;

-- Conceder privil√©gios necess√°rios
GRANT CONNECT, RESOURCE, CREATE SESSION, CREATE TABLE, CREATE SEQUENCE TO fiap;
GRANT UNLIMITED TABLESPACE TO fiap;

-- Confirmar cria√ß√£o
SELECT 'USER_CREATED_SUCCESS' FROM DUAL;

EXIT;
EOF
)
    
    # Verificar se a cria√ß√£o foi bem-sucedida
    if echo "$USER_CREATION_RESULT" | grep -q "USER_CREATED_SUCCESS"; then
        echo "‚úÖ Usu√°rio FIAP criado com sucesso!"
        
        # Testar conex√£o com o usu√°rio FIAP
        echo "üß™ Testando conex√£o do usu√°rio FIAP..."
        TEST_RESULT=$(docker exec oracle-free sqlplus -s fiap/123456@FREEPDB1 <<< "SELECT 'CONNECTION_OK' FROM DUAL; EXIT;" 2>/dev/null)
        
        if echo "$TEST_RESULT" | grep -q "CONNECTION_OK"; then
            echo "‚úÖ Conex√£o do usu√°rio FIAP testada com sucesso!"
        else
            echo "‚ö†Ô∏è  Aviso: Usu√°rio criado mas teste de conex√£o falhou"
        fi
    else
        echo "‚ùå Erro ao criar usu√°rio FIAP"
        echo "üîç Detalhes do erro:"
        echo "$USER_CREATION_RESULT"
        echo "‚ö†Ô∏è  Voc√™ pode tentar criar manualmente:"
        echo "   docker exec -it oracle-free sqlplus sys/123456@FREEPDB1 as sysdba"
    fi
    
    echo "=================================================="
    echo "üìä Informa√ß√µes de Conex√£o:"
    echo "   Host: localhost"
    echo "   Porta: 1521"
    echo "   Service Name: FREEPDB1"
    echo "   Usu√°rio: fiap"
    echo "   Senha: 123456"
    echo ""
    echo "üîó String de Conex√£o Python:"
    echo "   DB_DSN = 'localhost:1521/FREEPDB1'"
    echo ""
    echo "üîó Para cliente de banco (ex: DBeaver):"
    echo "   Tipo: Oracle"
    echo "   Host: localhost"
    echo "   Porta: 1521"
    echo "   Database: FREEPDB1 (Service Name, n√£o SID)"
    echo "   Usu√°rio: fiap"
    echo "   Senha: 123456"
    echo ""
    echo "üåê Enterprise Manager:"
    echo "   https://localhost:5500/em"
    echo "   Usu√°rio: sys"
    echo "   Senha: 123456"
    echo "   Container: FREEPDB1"
    echo ""
    echo "üí° Pr√≥ximos passos:"
    echo "   1. cd sensor.ingest.local"
    echo "   2. python3 servidor.py"
    echo "   3. Testar: curl http://localhost:8000/health"
else
    echo ""
    echo "‚ùå Oracle n√£o ficou pronto no tempo esperado"
    echo "üîç Verifique os logs: docker logs oracle-free"
    echo "‚è≠Ô∏è  Pode ser que ainda esteja inicializando..."
    echo "üîÑ Tente executar novamente este script em alguns minutos"
fi

echo ""
echo "üõ†Ô∏è  Comandos √∫teis:"
echo "   docker logs oracle-free              # Ver logs"
echo "   docker stop oracle-free             # Parar"
echo "   docker start oracle-free            # Iniciar"
echo "   docker rm -f oracle-free            # Remover"
echo "   docker exec -it oracle-free bash    # Acessar container"
echo "   docker exec -it oracle-free sqlplus fiap/123456@FREEPDB1  # SQL*Plus" 